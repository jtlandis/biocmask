[{"path":"https://jtlandis.github.io/biocmask/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 biocmask authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jtlandis.github.io/biocmask/articles/biocmask.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"biocmask is great","text":"GRanges package (Lawrence 2013) great","code":""},{"path":"https://jtlandis.github.io/biocmask/articles/biocmask.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"biocmask is great","text":"","code":"library(devtools) ## Loading required package: usethis session_info() ## ─ Session info ─────────────────────────────────────────────────────────────── ##  setting  value ##  version  R version 4.4.0 (2024-04-24) ##  os       macOS Ventura 13.6.9 ##  system   x86_64, darwin20 ##  ui       X11 ##  language en ##  collate  en_US.UTF-8 ##  ctype    en_US.UTF-8 ##  tz       America/New_York ##  date     2024-09-11 ##  pandoc   3.1.11 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/x86_64/ (via rmarkdown) ##  ## ─ Packages ─────────────────────────────────────────────────────────────────── ##  package     * version date (UTC) lib source ##  bslib         0.8.0   2024-07-29 [1] CRAN (R 4.4.0) ##  cachem        1.1.0   2024-05-16 [1] CRAN (R 4.4.0) ##  cli           3.6.3   2024-06-21 [1] CRAN (R 4.4.0) ##  desc          1.4.3   2023-12-10 [1] CRAN (R 4.4.0) ##  devtools    * 2.4.5   2022-10-11 [1] CRAN (R 4.4.0) ##  digest        0.6.37  2024-08-19 [1] CRAN (R 4.4.1) ##  ellipsis      0.3.2   2021-04-29 [1] CRAN (R 4.4.0) ##  evaluate      0.24.0  2024-06-10 [1] CRAN (R 4.4.0) ##  fastmap       1.2.0   2024-05-15 [1] CRAN (R 4.4.0) ##  fs            1.6.4   2024-04-25 [1] CRAN (R 4.4.0) ##  glue          1.7.0   2024-01-09 [1] CRAN (R 4.4.0) ##  htmltools     0.5.8.1 2024-04-04 [1] CRAN (R 4.4.0) ##  htmlwidgets   1.6.4   2023-12-06 [1] CRAN (R 4.4.0) ##  httpuv        1.6.15  2024-03-26 [1] CRAN (R 4.4.0) ##  jquerylib     0.1.4   2021-04-26 [1] CRAN (R 4.4.0) ##  jsonlite      1.8.8   2023-12-04 [1] CRAN (R 4.4.0) ##  knitr         1.48    2024-07-07 [1] CRAN (R 4.4.0) ##  later         1.3.2   2023-12-06 [1] CRAN (R 4.4.0) ##  lifecycle     1.0.4   2023-11-07 [1] CRAN (R 4.4.0) ##  magrittr      2.0.3   2022-03-30 [1] CRAN (R 4.4.0) ##  memoise       2.0.1   2021-11-26 [1] CRAN (R 4.4.0) ##  mime          0.12    2021-09-28 [1] CRAN (R 4.4.0) ##  miniUI        0.1.1.1 2018-05-18 [1] CRAN (R 4.4.0) ##  pkgbuild      1.4.4   2024-03-17 [1] CRAN (R 4.4.0) ##  pkgdown       2.1.0   2024-07-06 [1] CRAN (R 4.4.0) ##  pkgload       1.4.0   2024-06-28 [1] CRAN (R 4.4.0) ##  profvis       0.3.8   2023-05-02 [1] CRAN (R 4.4.0) ##  promises      1.3.0   2024-04-05 [1] CRAN (R 4.4.0) ##  purrr         1.0.2   2023-08-10 [1] CRAN (R 4.4.0) ##  R6            2.5.1   2021-08-19 [1] CRAN (R 4.4.0) ##  ragg          1.3.2   2024-05-15 [1] CRAN (R 4.4.0) ##  Rcpp          1.0.13  2024-07-17 [1] CRAN (R 4.4.0) ##  remotes       2.5.0   2024-03-17 [1] CRAN (R 4.4.0) ##  rlang         1.1.4   2024-06-04 [1] CRAN (R 4.4.0) ##  rmarkdown     2.28    2024-08-17 [1] CRAN (R 4.4.1) ##  rstudioapi    0.16.0  2024-03-24 [1] CRAN (R 4.4.0) ##  sass          0.4.9   2024-03-15 [1] CRAN (R 4.4.0) ##  sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.4.0) ##  shiny         1.9.1   2024-08-01 [1] CRAN (R 4.4.0) ##  stringi       1.8.4   2024-05-06 [1] CRAN (R 4.4.0) ##  stringr       1.5.1   2023-11-14 [1] CRAN (R 4.4.0) ##  systemfonts   1.1.0   2024-05-15 [1] CRAN (R 4.4.0) ##  textshaping   0.4.0   2024-05-24 [1] CRAN (R 4.4.0) ##  urlchecker    1.0.1   2021-11-30 [1] CRAN (R 4.4.0) ##  usethis     * 3.0.0   2024-07-29 [1] CRAN (R 4.4.0) ##  vctrs         0.6.5   2023-12-01 [1] CRAN (R 4.4.0) ##  xfun          0.47    2024-08-17 [1] CRAN (R 4.4.1) ##  xtable        1.8-4   2019-04-21 [1] CRAN (R 4.4.0) ##  yaml          2.3.10  2024-07-26 [1] CRAN (R 4.4.0) ##  ##  [1] /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/library ##  ## ──────────────────────────────────────────────────────────────────────────────"},{"path":[]},{"path":"https://jtlandis.github.io/biocmask/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Justin Landis. Author, maintainer. Michael Love. Author.","code":""},{"path":"https://jtlandis.github.io/biocmask/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Landis J, Love M (2024). biocmask: Create data masks SE dplyr functions. R package version 0.99.2, https://jtlandis.github.io/biocmask, https://github.com/jtlandis/biocmask.","code":"@Manual{,   title = {biocmask: Create data masks for SE dplyr functions},   author = {Justin Landis and Michael Love},   year = {2024},   note = {R package version 0.99.2, https://jtlandis.github.io/biocmask},   url = {https://github.com/jtlandis/biocmask}, }"},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"readme","dir":"","previous_headings":"","what":"Create data masks for SE dplyr functions","title":"Create data masks for SE dplyr functions","text":"goal repo design efficient abstractions SummarizedExperiment class using common dplyr functions feels natural operating data.frame tibble. overall goal feel like tibble operation, smart emphasize certain data wrangling pipelines translate well structure SummarizedExperiment class. Note: repository still active development. Internal structure classes code organization likely change.","code":""},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"example-data","dir":"","previous_headings":"","what":"Example Data","title":"Create data masks for SE dplyr functions","text":"using following example data throughout document: shows profiling performing simple operation dataset following dimensional (14599 x 7).","code":"se_example <- tidySummarizedExperiment::pasilla # library(tidySummarizedExperiment) Warning: package 'S4Vectors' was built under R version 4.4.1  Warning: package 'IRanges' was built under R version 4.4.1 # load biocmask last to use its `dplyr` verbs library(biocmask) set.seed(1234) se <- SummarizedExperiment(   list(counts = matrix(sample(1:20, 20), nrow = 5, ncol = 4)),   rowData = data.frame(gene = sprintf(\"g%i\", 1:5),                        length = rbinom(5, 100, runif(5)),                        direction = sample(c(\"-\",\"+\"), 5, T)),   colData = data.frame(sample = sprintf(\"s%i\", 1:4),                        condition = rep(c(\"cntrl\",\"drug\"), each =2)) ) rownames(se) <- sprintf(\"row_%s\", letters[1:5]) colnames(se) <- sprintf(\"col_%s\", LETTERS[1:4]) assay(se, 'logcounts') <- log(assay(se, 'counts')) se # A SummarizedExperiment-tibble Abstraction: 5 × 4     .features .samples | counts logcounts | gene  length direction | sample     <chr>     <chr>    |  <int>     <dbl> | <chr>  <int> <chr>     | <chr>    1 row_a     col_A    |     16      2.77 | g1         3 -         | s1       2 row_b     col_A    |      5      1.61 | g2        51 -         | s1       3 row_c     col_A    |     12      2.48 | g3        24 -         | s1       4 row_d     col_A    |     15      2.71 | g4        32 +         | s1       5 row_e     col_A    |      9      2.20 | g5        49 +         | s1       …   …         …             …        …     …         … …            …     n-4 row_a     col_D    |      8      2.08 | g1         3 -         | s4     n-3 row_b     col_D    |     17      2.83 | g2        51 -         | s4     n-2 row_c     col_D    |      1      0    | g3        24 -         | s4     n-1 row_d     col_D    |     18      2.89 | g4        32 +         | s4     n   row_e     col_D    |      3      1.10 | g5        49 +         | s4     # ℹ n = 20 # ℹ 1 more variable: condition <chr> native_example <- function(se) {   assay(se, \"logcounts\") <- log1p(assay(se, \"counts\"))   se } new_example <- function(se) {   biocmask:::mutate.SummarizedExperiment(     se,     logcounts = log1p(counts)     ) } old_example <- function(se) {   tidySummarizedExperiment:::mutate.SummarizedExperiment(     se,     logcounts = log1p(counts)     ) }  # underlying data is a data.frame and not a matrix assay(se_example, \"counts\") <- as.matrix(assay(se_example, \"counts\"))   bench::mark(   native = native_example(se_example),   new = new_example(se_example),   old = old_example(se_example),   check = F ) Warning: Some expressions had a GC in every iteration; so filtering is disabled.  # A tibble: 3 × 6   expression      min   median `itr/sec` mem_alloc `gc/sec`   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> 1 native       14.1ms     18ms     54.9   804.77KB     1.96 2 new          23.6ms   25.2ms     38.8     9.42MB     3.88 3 old         893.7ms  893.7ms      1.12   83.53MB     3.36"},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"the-abstraction","dir":"","previous_headings":"","what":"The abstraction","title":"Create data masks for SE dplyr functions","text":"order access parts SummarizedExperiment tibble, propose use data masking concepts rlang package.","code":""},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"data-mask","dir":"","previous_headings":"The abstraction","what":"data mask","title":"Create data masks for SE dplyr functions","text":"quote documentation ?rlang::new_data_mask: data mask environment (possibly multiple environments forming ancestry) containing user-supplied objects. Objects mask precedence objects environment (.e. mask objects). Many R functions evaluate quoted expressions data mask expressions can refer objects within user data. Section 1.2.2 , constructing several environments mask structure SummarizedExperiment object. using !! operator rlang package well. information , please see ?rlang::`bang-bang`","code":""},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"the-proposal","dir":"","previous_headings":"The abstraction","what":"The proposal","title":"Create data masks for SE dplyr functions","text":"Figure 1, abstract SummarizedExperiment object (top portion) three distinct data masks (bottom portion) represent different evaluation contexts object. either evaluating assay_mask, rowData_mask, colData_mask.","code":""},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"top-level-of-the-mask","dir":"","previous_headings":"The abstraction > The proposal","what":"Top level of the mask","title":"Create data masks for SE dplyr functions","text":"Data lazily bound top level mask “” SummarizedExperiment object’s data context. example, se bindings top level may look like : Furthermore, top level environments access via pronoun created rlang::as_data_pronoun. allow users access specific parts SummarizedExperiment object’s data “” modifications (seen later sections). example, user may evaluate .rows$length forces expression rowData(se)[[\"length\"]].","code":"library(rlang) Attaching package: 'rlang'  The following object is masked from 'package:Biobase':      exprs shared_env <- new_environment(   list(     .nrow = nrow(se),     .ncol = ncol(se)   ),    parent = empty_env() )  # assay mask assay_mask_top <- new.env(parent = shared_env) env_bind_lazy(   assay_mask_top, # The top environement   counts = !!quo(assay(se, \"counts\")),   logcounts = !!quo(assay(se, \"logcounts\")) ) # rowData mask rowData_mask_top <- new.env(parent = shared_env) env_bind_lazy(   rowData_mask_top, # the top environment   gene = !!quo(rowData(se)[[\"gene\"]]),   length = !!quo(rowData(se)[[\"length\"]]),   direction = !!quo(rowData(se)[[\"direction\"]]) ) # colData mask colData_mask_top <- new.env(parent = shared_env) env_bind_lazy(   colData_mask_top, # the top environemnt   sample = !!quo(colData(se)[[\"sample\"]]),   condition = !!quo(colData(se)[[\"condition\"]]) ) # assay mask access to rowData and colData env_bind(   assay_mask_top,   .rows = as_data_pronoun(rowData_mask_top),   .cols = as_data_pronoun(colData_mask_top) ) # rowData mask access to assays and colData env_bind(   rowData_mask_top,   .assay = as_data_pronoun(assay_mask_top),   .cols = as_data_pronoun(colData_mask_top) ) # colData mask access to assays and rowData env_bind(   colData_mask_top,   .assay = as_data_pronoun(assay_mask_top),   .rows = as_data_pronoun(rowData_mask_top) )"},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"middle-level-of-the-mask","dir":"","previous_headings":"The abstraction > The proposal","what":"Middle level of the mask","title":"Create data masks for SE dplyr functions","text":", lazily bind expressions mold data expected length user working vector tibble. also binding symbols two environments, parts se available regardless mask evaluating .","code":"# define some helper function quo_helper <- function(env) {   force(env)   function(expr) {     expr <- enexpr(expr)     new_quosure(expr, env = env)   } }"},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"assay-mask-moldings","dir":"","previous_headings":"The abstraction > The proposal > Middle level of the mask","what":"assay mask moldings","title":"Create data masks for SE dplyr functions","text":"expected output assay context user unwrapped se object full tibble. Thus vector length .nrow * .ncol equal 20 example. example making values se available assay mask. Now value lazily available normal tibble. Note variables .ncol .nrow bound within shared_env, assay_mask_mid child .","code":"assay_mask_mid <- new.env(parent = assay_mask_top) quo_assay <- quo_helper(assay_mask_top) env_bind_lazy(   assay_mask_mid,   ## bindings for assays...   ## - each element of assays(se) is a matrix   ##   thus we can cast to vector like so:   counts = !!quo_assay(as.vector(counts)),   logcounts = !!quo_assay(as.vector(logcounts)),   ## bindings for rowData...   ## - each vector here is length==.nrow and   ##   we must replicate .ncol    gene = !!quo_assay(vctrs::vec_rep(.rows$gene, times = .ncol)),   length = !!quo_assay(vctrs::vec_rep(.rows$length, times = .ncol)),   direction = !!quo_assay(vctrs::vec_rep(.rows$direction, times = .ncol)),   ## bindings for colData...   ## - each vector here is length==.ncol and   ##   we must replicate .nrow times each   sample = !!quo_assay(vctrs::vec_rep_each(.cols$sample, times = .nrow)),   condition = !!quo_assay(vctrs::vec_rep_each(.cols$condition, times = .nrow)) )"},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"rowdata-mask-moldings","dir":"","previous_headings":"The abstraction > The proposal > Middle level of the mask","what":"rowData mask moldings","title":"Create data masks for SE dplyr functions","text":"still debating proper way represent data within context (colData context). now settled expectation. Data represented user unwrapped se object nested rowData columns.","code":"rowData_mask_mid <- new.env(parent = rowData_mask_top) quo_rowData <- quo_helper(rowData_mask_top) env_bind_lazy(   rowData_mask_mid,   ## Note, We do not need to make bindings   ## for rowData objects because they are    ## already in the desired form!      ## bindings for assays   counts = !!quo_rowData(lapply(1:.nrow, function(i, x) x[i,,drop = TRUE], x = .assay$counts)),   logcounts = !!quo_rowData(lapply(1:.nrow, function(i, x) x[i,,drop = TRUE], x = .assay$logcounts)),   ## bindings for colData   sample = !!quo_rowData(vctrs::vec_rep(list(.cols$sample), times = .nrow)),   condition = !!quo_rowData(vctrs::vec_rep(list(.cols$condition), times = .nrow)) )"},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"coldata-mask-moldings","dir":"","previous_headings":"The abstraction > The proposal > Middle level of the mask","what":"colData mask moldings","title":"Create data masks for SE dplyr functions","text":"Following logic previous section, Data represeted user unwrapped se object nested colData columns.","code":"colData_mask_mid <- new.env(parent = colData_mask_top) quo_colData <- quo_helper(colData_mask_top) env_bind_lazy(   colData_mask_mid,   ## No need to bind colData.      ## bindings for assays   counts = !!quo_colData(lapply(1:.ncol, function(i, x) x[,i,drop = TRUE], x = .assay$counts)),   logcounts = !!quo_colData(lapply(1:.ncol, function(i, x) x[,i,drop = TRUE], x = .assay$logcounts)),   ## binds for rowData   gene = !!quo_colData(vctrs::vec_rep(list(.rows$gene), times = .ncol)),   length = !!quo_colData(vctrs::vec_rep(list(.rows$length), times = .ncol)),   direction = !!quo_colData(vctrs::vec_rep(list(.rows$direction), times = .ncol)), )"},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"bottom-level-of-the-mask","dir":"","previous_headings":"The abstraction > The proposal","what":"Bottom level of the mask","title":"Create data masks for SE dplyr functions","text":"still debating portion mask required. current construction, bind values active Binding functions, simply force evaluation lazily bound expressions defined earlier.","code":"# helper function force_fn <- function(name, env) {   new_function(pairlist(), body = as.name(name), env = env) } bind_names <- function(names, env) {   lapply(setNames(nm = names),          force_fn, env = env) } all_names <- c(\"counts\", \"logcounts\",                \"gene\", \"length\", \"direction\",                \"sample\", \"condition\") assay_mask_bot <- new.env(parent = assay_mask_mid) env_bind_active(   assay_mask_bot,   !!! bind_names(all_names, assay_mask_mid) )  rowData_mask_bot <- new.env(parent = rowData_mask_mid) env_bind_active(   rowData_mask_bot,   !!! bind_names(all_names, rowData_mask_mid) )  colData_mask_bot <- new.env(parent =colData_mask_mid) env_bind_active(   colData_mask_bot,   !!! bind_names(all_names,colData_mask_mid) )"},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"creating-rlang-data-masks","dir":"","previous_headings":"The abstraction > The proposal","what":"Creating rlang data masks","title":"Create data masks for SE dplyr functions","text":"","code":"#test expression my_tibble_expr <- expr(   tibble(     counts = counts,     length = length,     condition = condition   ) )"},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"assay-mask","dir":"","previous_headings":"The abstraction > The proposal > Creating rlang data masks","what":"assay mask","title":"Create data masks for SE dplyr functions","text":"","code":"assay_mask <- new_data_mask(assay_mask_bot, top = shared_env) eval_tidy(my_tibble_expr, assay_mask) # A tibble: 20 × 3    counts length condition     <int>  <int> <chr>      1     16      3 cntrl      2      5     51 cntrl      3     12     24 cntrl      4     15     32 cntrl      5      9     49 cntrl      6     19      3 cntrl      7      6     51 cntrl      8      4     24 cntrl      9      2     32 cntrl     10      7     49 cntrl     11     14      3 drug      12     10     51 drug      13     11     24 drug      14     20     32 drug      15     13     49 drug      16      8      3 drug      17     17     51 drug      18      1     24 drug      19     18     32 drug      20      3     49 drug"},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"rowdata-mask","dir":"","previous_headings":"The abstraction > The proposal > Creating rlang data masks","what":"rowData mask","title":"Create data masks for SE dplyr functions","text":"","code":"rowData_mask <- new_data_mask(rowData_mask_bot, top = shared_env) eval_tidy(my_tibble_expr, rowData_mask) # A tibble: 5 × 3   counts    length condition   <list>     <int> <list>    1 <int [4]>      3 <chr [4]> 2 <int [4]>     51 <chr [4]> 3 <int [4]>     24 <chr [4]> 4 <int [4]>     32 <chr [4]> 5 <int [4]>     49 <chr [4]>"},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"coldata-mask","dir":"","previous_headings":"The abstraction > The proposal > Creating rlang data masks","what":"colData mask","title":"Create data masks for SE dplyr functions","text":"","code":"colData_mask <- new_data_mask(colData_mask_bot, top = shared_env) eval_tidy(my_tibble_expr, colData_mask) # A tibble: 4 × 3   counts    length    condition   <list>    <list>    <chr>     1 <int [5]> <int [5]> cntrl     2 <int [5]> <int [5]> cntrl     3 <int [5]> <int [5]> drug      4 <int [5]> <int [5]> drug"},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"wrapping-it-all-up","dir":"","previous_headings":"The abstraction","what":"Wrapping it all up","title":"Create data masks for SE dplyr functions","text":"Everything proposal demonstrate masks may work. data pronouns may access “unmolded” data regardless context, molded data give us desired vector outputs. Lazily binding expressions means expensive operations evaluated unless forced user. proposal fairly verbose, can programatically. plan currently R6 classes handle binding data. One R6 object handle hierarchy environments mask, dubbed DataMaskAbstraction, another R6 object, dubbed DataMaskSEManager, handle abstractions provide methods evaluate desired contexts. approach similar dplyr gone structuring data masks, wrapping R6 class (see dplyr:::DataMask).","code":""},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"contextual-helpers","dir":"","previous_headings":"The abstraction","what":"contextual helpers","title":"Create data masks for SE dplyr functions","text":"make feel natural, can optionally include contextual helper functions. propose defaul mask everything may evaluated assay_mask. can provide “helper” functions (similar dplyr::across) modifies behavior dplyr verb within context. can provide two functions rows(...) cols(...) (names TBD) evaluate named expressions ... rowData_mask colData_mask respectively. Results masks also expect output lengths .nrow .ncol respectively assigned back respective mask’s top level environment (lazy re-bindings across masks handled DataMaskSEManager appropriate). can copy dplyr’s approach caching contextual information using internal environment (dplyr:::context_peek, dplyr:::context_poke). downside proposal need make methods helper functions dplyr provides. Examples n(), cur_group_id(), etc (see ?dplyr::context)","code":""},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"dplyr-verbs","dir":"","previous_headings":"","what":"dplyr verbs","title":"Create data masks for SE dplyr functions","text":"section discuss various dplyr verbs work abstractions","code":"library(dplyr) tibble_expr <- expr(     tibble(       counts = counts,       logcounts = logcounts,       gene = gene,       length = length,       direction = direction,       sample = sample,       condition = condition     )   ) assay_ctx <- eval_tidy(tibble_expr, assay_mask) rowData_ctx <- eval_tidy(tibble_expr, rowData_mask) colData_ctx <- eval_tidy(tibble_expr, colData_mask)"},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"mutate","dir":"","previous_headings":"dplyr verbs","what":"mutate","title":"Create data masks for SE dplyr functions","text":"mutate one common dplyr verbs used likely compatible.","code":""},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"filter","dir":"","previous_headings":"dplyr verbs","what":"filter","title":"Create data masks for SE dplyr functions","text":"filter easy theory implement, certain filters tidy dataset recover valid SummarizedExperiment object. example, consider mutate.data.frame call: closest equivalent se : Thus think make sense error user attempts filter assay context inform valid SummarizedExperiment object returned. perform filters, user convert tibble explicitly first.","code":"filter(assay_ctx, 1:n() %in% c(1, n())) # A tibble: 2 × 7   counts logcounts gene  length direction sample condition    <int>     <dbl> <chr>  <int> <chr>     <chr>  <chr>     1     16      2.77 g1         3 -         s1     cntrl     2      3      1.10 g5        49 +         s4     drug se[c(1,5), c(1, 4)] # A SummarizedExperiment-tibble Abstraction: 2 × 2   .features .samples | counts logcounts | gene  length direction | sample   <chr>     <chr>    |  <int>     <dbl> | <chr>  <int> <chr>     | <chr>  1 row_a     col_A    |     16      2.77 | g1         3 -         | s1     2 row_e     col_A    |      9      2.20 | g5        49 +         | s1     3 row_a     col_D    |      8      2.08 | g1         3 -         | s4     4 row_e     col_D    |      3      1.10 | g5        49 +         | s4     # ℹ 1 more variable: condition <chr>"},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"group_by","dir":"","previous_headings":"dplyr verbs","what":"group_by","title":"Create data masks for SE dplyr functions","text":"likely difficult implement. need look dplyr manages . fo methods dplyr::DataMask external calls cpp code, seems cache “chops” possibly make mask per data chop.","code":""},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"summarizesummarise","dir":"","previous_headings":"dplyr verbs","what":"summarize/summarise","title":"Create data masks for SE dplyr functions","text":"personally think use case extremely limited. summarize functions side effect retaining grouped variables well newly evaluated expressions. make functionality, wonder often useful. usually useful store summaries row column rowData colData respectively, already doable mutate. suppose world user may use summarize make model group, output fit SummarizedExperiment framework (think) probably return tibble.","code":""},{"path":"https://jtlandis.github.io/biocmask/index.html","id":"distinct","dir":"","previous_headings":"dplyr verbs","what":"distinct","title":"Create data masks for SE dplyr functions","text":"Probably implement method similar reasons filter. implemented, return SummarizedExperiment object.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask-assays.html","id":null,"dir":"Reference","previous_headings":"","what":"biocmask for SummarizedExperiment assays() — BiocDataMask-assays","title":"biocmask for SummarizedExperiment assays() — BiocDataMask-assays","text":"specialized version biocmask R6 object assays list object. includes chopping unchopping matrix like objects.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask-assays.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"biocmask for SummarizedExperiment assays() — BiocDataMask-assays","text":"biocmask::biocmask -> biocmask_assay","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask-assays.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"biocmask for SummarizedExperiment assays() — BiocDataMask-assays","text":"biocmask::biocmask$bind() biocmask::biocmask$eval() biocmask::biocmask$on_bind() biocmask::biocmask$results()","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask-assays.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"biocmask for SummarizedExperiment assays() — BiocDataMask-assays","text":"biocmask_assay$new() biocmask_assay$unchop() biocmask_assay$clone()","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask-assays.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"biocmask for SummarizedExperiment assays() — BiocDataMask-assays","text":"Create biocmask .data. .data chopped .indices, environments built .env","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask-assays.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"biocmask for SummarizedExperiment assays() — BiocDataMask-assays","text":"","code":"biocmask_assay$new(.data, .indices, .env, .nrow, .ncol)"},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask-assays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"biocmask for SummarizedExperiment assays() — BiocDataMask-assays","text":".data named list like object create mask .indices indices used chop .data .env environment resulting mask built . .nrow, .ncol number rows columns element .data respectively","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask-assays.html","id":"method-unchop-","dir":"Reference","previous_headings":"","what":"Method unchop()","title":"biocmask for SummarizedExperiment assays() — BiocDataMask-assays","text":"unchop data within mask, returns matrix","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask-assays.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"biocmask for SummarizedExperiment assays() — BiocDataMask-assays","text":"","code":"biocmask_assay$unchop(name)"},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask-assays.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"biocmask for SummarizedExperiment assays() — BiocDataMask-assays","text":"name name binding retrieve unchop","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask-assays.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"biocmask for SummarizedExperiment assays() — BiocDataMask-assays","text":"objects class cloneable method.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask-assays.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"biocmask for SummarizedExperiment assays() — BiocDataMask-assays","text":"","code":"biocmask_assay$clone(deep = FALSE)"},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask-assays.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"biocmask for SummarizedExperiment assays() — BiocDataMask-assays","text":"deep Whether make deep clone.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":null,"dir":"Reference","previous_headings":"","what":"biocmask Data Mask Object — BiocDataMask","title":"biocmask Data Mask Object — BiocDataMask","text":"R6 Object tracks bindings list-like object. includes DFrame objects. several inherited environments data stored within. Environments: .shared_env –> curr_group_ctx –> foreign –> lazy –> chops –> active_mask .shared_env : environment provided initialization. may shared multiple BiocDataMasks. curr_group  : Currently used. foreign     : space put foreign bindings, .e. object unrelated .data provided initialization. space currently used place pronouns related contexts. lazy        : strict lazy binding data within .data. binding made initialization. chops       : lazy data chopped list .indices. New bindings BiocDataMask context expected \"chopped\" format assigned . active_mask : active binding chops proper list index used depending current group context. current group context moment determined .shared_env curr_group. plans remove curr_group environment.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"biocmask Data Mask Object — BiocDataMask","text":"environments hierarchy environments mask names associated names data mask ptype get zero-length slices underlying data added newly added names mask holds grouping information object foreign bindings","code":""},{"path":[]},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"biocmask Data Mask Object — BiocDataMask","text":"biocmask$new() biocmask$on_bind() biocmask$bind() biocmask$unchop() biocmask$results() biocmask$eval() biocmask$clone()","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"biocmask Data Mask Object — BiocDataMask","text":"Create biocmask .data. .data chopped .indices, environments built .env","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"biocmask Data Mask Object — BiocDataMask","text":"","code":"biocmask$new(.data, .indices = NULL, .env)"},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"biocmask Data Mask Object — BiocDataMask","text":".data named list like object create mask .indices indices used chop .data .env environment resulting mask built .","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"method-on-bind-","dir":"Reference","previous_headings":"","what":"Method on_bind()","title":"biocmask Data Mask Object — BiocDataMask","text":"appends callback function executed value bound mask. Mainly used inform masks new values","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"biocmask Data Mask Object — BiocDataMask","text":"","code":"biocmask$on_bind(.fun)"},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"biocmask Data Mask Object — BiocDataMask","text":".fun function created add_bind()","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"method-bind-","dir":"Reference","previous_headings":"","what":"Method bind()","title":"biocmask Data Mask Object — BiocDataMask","text":"binds value name within chops environment.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"biocmask Data Mask Object — BiocDataMask","text":"","code":"biocmask$bind(name, value)"},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"biocmask Data Mask Object — BiocDataMask","text":"name character scalar value results $eval form chops","code":""},{"path":[]},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"biocmask Data Mask Object — BiocDataMask","text":"","code":"biocmask$unchop(name)"},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"biocmask Data Mask Object — BiocDataMask","text":"name name binding retrieve unchop","code":""},{"path":[]},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"biocmask Data Mask Object — BiocDataMask","text":"","code":"biocmask$results()"},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"biocmask Data Mask Object — BiocDataMask","text":"named list evaluated expression, unchopped","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"method-eval-","dir":"Reference","previous_headings":"","what":"Method eval()","title":"biocmask Data Mask Object — BiocDataMask","text":"evaluates quoted expression within new datamask","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"biocmask Data Mask Object — BiocDataMask","text":"","code":"biocmask$eval(quo, env = caller_env())"},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"biocmask Data Mask Object — BiocDataMask","text":"quo quosure evaluate env environment search mask","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"biocmask Data Mask Object — BiocDataMask","text":"objects class cloneable method.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"biocmask Data Mask Object — BiocDataMask","text":"","code":"biocmask$clone(deep = FALSE)"},{"path":"https://jtlandis.github.io/biocmask/reference/BiocDataMask.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"biocmask Data Mask Object — BiocDataMask","text":"deep Whether make deep clone.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocmaskManager.html","id":null,"dir":"Reference","previous_headings":"","what":"biocmask Data Mask Manager — BiocmaskManager","title":"biocmask Data Mask Manager — BiocmaskManager","text":"object organizes serveral biocmasks, allowing expressions evaluated different contexts.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocmaskManager.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"biocmask Data Mask Manager — BiocmaskManager","text":"ctx get set current context ctx_mask get current context biocmask n_groups get current context biocmask group size group_id get set current context biocmask group id masks get private list masks extended environments extended context mask.","code":""},{"path":[]},{"path":"https://jtlandis.github.io/biocmask/reference/BiocmaskManager.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"biocmask Data Mask Manager — BiocmaskManager","text":"biocmask_manager$new() biocmask_manager$along_ctx() biocmask_manager$eval() biocmask_manager$results() biocmask_manager$clone()","code":""},{"path":[]},{"path":"https://jtlandis.github.io/biocmask/reference/BiocmaskManager.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"biocmask Data Mask Manager — BiocmaskManager","text":"","code":"biocmask_manager$new(.data, .masks, .ctx_env, .extended_env)"},{"path":"https://jtlandis.github.io/biocmask/reference/BiocmaskManager.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"biocmask Data Mask Manager — BiocmaskManager","text":".data Original data .masks list named biocmask objects .ctx_env shared context environment .extended_env extended environments","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocmaskManager.html","id":"method-along-ctx-","dir":"Reference","previous_headings":"","what":"Method along_ctx()","title":"biocmask Data Mask Manager — BiocmaskManager","text":"provides sequence iterate groups","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocmaskManager.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"biocmask Data Mask Manager — BiocmaskManager","text":"","code":"biocmask_manager$along_ctx()"},{"path":"https://jtlandis.github.io/biocmask/reference/BiocmaskManager.html","id":"method-eval-","dir":"Reference","previous_headings":"","what":"Method eval()","title":"biocmask Data Mask Manager — BiocmaskManager","text":"eval expression current context","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocmaskManager.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"biocmask Data Mask Manager — BiocmaskManager","text":"","code":"biocmask_manager$eval(quo, name, env = caller_env())"},{"path":"https://jtlandis.github.io/biocmask/reference/BiocmaskManager.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"biocmask Data Mask Manager — BiocmaskManager","text":"quo quosure quoted expression name resulting name bind env environment","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocmaskManager.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"biocmask Data Mask Manager — BiocmaskManager","text":"returns evaluated quo form chop","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocmaskManager.html","id":"method-results-","dir":"Reference","previous_headings":"","what":"Method results()","title":"biocmask Data Mask Manager — BiocmaskManager","text":"collects evaluated results biocmasks","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocmaskManager.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"biocmask Data Mask Manager — BiocmaskManager","text":"","code":"biocmask_manager$results()"},{"path":"https://jtlandis.github.io/biocmask/reference/BiocmaskManager.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"biocmask Data Mask Manager — BiocmaskManager","text":"named list mask containing named list evaluated expressions.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocmaskManager.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"biocmask Data Mask Manager — BiocmaskManager","text":"objects class cloneable method.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/BiocmaskManager.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"biocmask Data Mask Manager — BiocmaskManager","text":"","code":"biocmask_manager$clone(deep = FALSE)"},{"path":"https://jtlandis.github.io/biocmask/reference/BiocmaskManager.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"biocmask Data Mask Manager — BiocmaskManager","text":"deep Whether make deep clone.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/arrange-SE.html","id":null,"dir":"Reference","previous_headings":"","what":"arrange rows or columns — arrange-SE","title":"arrange rows or columns — arrange-SE","text":"arrange() orders either rows columns SummarizedExperiment object. Note, guarentee valid SummarizedExperiment returned, arranging assays evaluation context disabled. Unlike dplyr verbs, arrange() largely ignores grouping. SummarizedExperiment method also provides functionality via .by_group argument.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/arrange-SE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"arrange rows or columns — arrange-SE","text":"","code":"# S3 method for class 'SummarizedExperiment' arrange(.data, ..., .by_group = FALSE)"},{"path":"https://jtlandis.github.io/biocmask/reference/arrange-SE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"arrange rows or columns — arrange-SE","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Variables, functions variables. Use desc() sort variable descending order. .by_group TRUE, sort first grouping variable. Applies grouped data frames .","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/arrange-SE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"arrange rows or columns — arrange-SE","text":"","code":"#arrange within rows/cols contexts separately arrange(se_simple,         rows(direction),         cols(dplyr::desc(condition))) #> # A SummarizedExperiment-tibble Abstraction: 5 × 4 #>     .features .samples | counts logcounts | gene  length direction | sample #>     <chr>     <chr>    |  <int>     <dbl> | <chr>  <int> <chr>     | <chr>  #>   1 row_2     col_3    |      1     0     | g2        24 +         | s3     #>   2 row_3     col_3    |     15     2.71  | g3        60 +         | s3     #>   3 row_5     col_3    |     12     2.48  | g5        37 +         | s3     #>   4 row_1     col_3    |      7     1.95  | g1         1 -         | s3     #>   5 row_4     col_3    |     10     2.30  | g4        39 -         | s3     #>   …   …         …             …       …      …         … …            …     #> n-4 row_2     col_2    |      2     0.693 | g2        24 +         | s2     #> n-3 row_3     col_2    |      6     1.79  | g3        60 +         | s2     #> n-2 row_5     col_2    |     13     2.56  | g5        37 +         | s2     #> n-1 row_1     col_2    |      8     2.08  | g1         1 -         | s2     #> n   row_4     col_2    |     17     2.83  | g4        39 -         | s2     #> # ℹ n = 20 #> # ℹ 1 more variable: condition <chr>  # access assay data to compute arrangement arrange(se_simple,          rows(rowSums(.assays_asis$counts)),         cols(colSums(.assays_asis$counts))) #> # A SummarizedExperiment-tibble Abstraction: 5 × 4 #>     .features .samples | counts logcounts | gene  length direction | sample #>     <chr>     <chr>    |  <int>     <dbl> | <chr>  <int> <chr>     | <chr>  #>   1 row_2     col_4    |      4      1.39 | g2        24 +         | s4     #>   2 row_1     col_4    |      9      2.20 | g1         1 -         | s4     #>   3 row_4     col_4    |      3      1.10 | g4        39 -         | s4     #>   4 row_5     col_4    |      5      1.61 | g5        37 +         | s4     #>   5 row_3     col_4    |     20      3.00 | g3        60 +         | s4     #>   …   …         …             …        …     …         … …            …     #> n-4 row_2     col_1    |     19      2.94 | g2        24 +         | s1     #> n-3 row_1     col_1    |     14      2.64 | g1         1 -         | s1     #> n-2 row_4     col_1    |     11      2.40 | g4        39 -         | s1     #> n-1 row_5     col_1    |     18      2.89 | g5        37 +         | s1     #> n   row_3     col_1    |     16      2.77 | g3        60 +         | s1     #> # ℹ n = 20 #> # ℹ 1 more variable: condition <chr>  # assay context is disabled arrange(se_simple, counts) |> try() #> Error in arrange(se_simple, counts) : Cannot arrange in `assays` context #> ✖ review expression indices 1 in dots #> ℹ consider wrapping expressions in rows(...) or cols(...)  # convert to `data.frame` first as.data.frame(se_simple) |>   arrange(counts) #>    .features .samples counts logcounts gene length direction sample condition #> 1      row_2    col_3      1 0.0000000   g2     24         +     s3      drug #> 2      row_2    col_2      2 0.6931472   g2     24         +     s2     cntrl #> 3      row_4    col_4      3 1.0986123   g4     39         -     s4      drug #> 4      row_2    col_4      4 1.3862944   g2     24         +     s4      drug #> 5      row_5    col_4      5 1.6094379   g5     37         +     s4      drug #> 6      row_3    col_2      6 1.7917595   g3     60         +     s2     cntrl #> 7      row_1    col_3      7 1.9459101   g1      1         -     s3      drug #> 8      row_1    col_2      8 2.0794415   g1      1         -     s2     cntrl #> 9      row_1    col_4      9 2.1972246   g1      1         -     s4      drug #> 10     row_4    col_3     10 2.3025851   g4     39         -     s3      drug #> 11     row_4    col_1     11 2.3978953   g4     39         -     s1     cntrl #> 12     row_5    col_3     12 2.4849066   g5     37         +     s3      drug #> 13     row_5    col_2     13 2.5649494   g5     37         +     s2     cntrl #> 14     row_1    col_1     14 2.6390573   g1      1         -     s1     cntrl #> 15     row_3    col_3     15 2.7080502   g3     60         +     s3      drug #> 16     row_3    col_1     16 2.7725887   g3     60         +     s1     cntrl #> 17     row_4    col_2     17 2.8332133   g4     39         -     s2     cntrl #> 18     row_5    col_1     18 2.8903718   g5     37         +     s1     cntrl #> 19     row_2    col_1     19 2.9444390   g2     24         +     s1     cntrl #> 20     row_3    col_4     20 2.9957323   g3     60         +     s4      drug"},{"path":"https://jtlandis.github.io/biocmask/reference/as.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"create data.frame — as.data.frame","title":"create data.frame — as.data.frame","text":"create data.frame","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/as.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create data.frame — as.data.frame","text":"","code":"# S3 method for class 'SummarizedExperiment' as.data.frame(x, ...)"},{"path":"https://jtlandis.github.io/biocmask/reference/as.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create data.frame — as.data.frame","text":"x SummarizedExperiment object ... unused arguments","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/biocmask-context.html","id":null,"dir":"Reference","previous_headings":"","what":"biocmask contexts — biocmask-context","title":"biocmask contexts — biocmask-context","text":"Contextual user-facing helper function dplyr verbs SummarizedExperiment objects. functions intended used top level call dplyr verbs ... argument, similar across()/if_any()/if_all(). Specifies following expressions evaluated within colData context. Specifies following expressions evaluated within rowData context. Specify single expression evaluate another context Specify single expression evaluate another context Specify single expression evaluate another context","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/biocmask-context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"biocmask contexts — biocmask-context","text":"","code":"cols(...)  rows(...)  col_ctx(x, asis = FALSE)  row_ctx(x, asis = FALSE)  assay_ctx(x, asis = FALSE)"},{"path":"https://jtlandis.github.io/biocmask/reference/biocmask-context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"biocmask contexts — biocmask-context","text":"x, ... expressions evaluate within associated context asis asis = FALSE (default) indicate using active bindings attempt coerce underlying data format appropriate current context. Indicating TRUE instead bind underlying data .","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/biocmask-package.html","id":null,"dir":"Reference","previous_headings":"","what":"biocmask: Create data masks for SE dplyr functions — biocmask-package","title":"biocmask: Create data masks for SE dplyr functions — biocmask-package","text":"package provides `rlang` data masks SummarizedExperiment class. enables evaluation unquoted expression different contexts SummarizedExperiment object optional access contexts. goal `biocmask` evaluation feel like data.frame object without ever needing unwind rectangular data.frame.","code":""},{"path":[]},{"path":"https://jtlandis.github.io/biocmask/reference/biocmask-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"biocmask: Create data masks for SE dplyr functions — biocmask-package","text":"Maintainer: Justin Landis jtlandis314@gmail.com (ORCID) Authors: Michael Love michaelisaiahlove@gmail.com","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/biocmask-printing.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing within tibble with S4 objects — biocmask-printing","title":"Printing within tibble with S4 objects — biocmask-printing","text":"biocmask uses pillar printing. want change S4 object printed within biocmask's print method, consider writing method function. print S4 objects tibble, biocmask hacks custom integer vector built vctrs S4 object lives attribute named \"phantomData\". default method formatting vec_phantom call showAsCell().","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/biocmask-printing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing within tibble with S4 objects — biocmask-printing","text":"","code":"biocmask_pillar_format(x, ...)"},{"path":"https://jtlandis.github.io/biocmask/reference/biocmask-printing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing within tibble with S4 objects — biocmask-printing","text":"x S4 object ... arguments passed pillar_shaft","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/class_vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"S7 classes for vctrs and S4 Vectors useful for S7 method dispatch — class_vctrs","title":"S7 classes for vctrs and S4 Vectors useful for S7 method dispatch — class_vctrs","text":"S7 classes vctrs S4 Vectors useful S7 method dispatch","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/class_vctrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S7 classes for vctrs and S4 Vectors useful for S7 method dispatch — class_vctrs","text":"","code":"class_vctrs"},{"path":"https://jtlandis.github.io/biocmask/reference/class_vctrs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"S7 classes for vctrs and S4 Vectors useful for S7 method dispatch — class_vctrs","text":"object class S7_union length 1.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/dot-pronouns.html","id":null,"dir":"Reference","previous_headings":"","what":"contextual biocmask pronouns — dot-pronouns","title":"contextual biocmask pronouns — dot-pronouns","text":"biocmask utilizes version rlang::.data pronouns. may used gain access evaluation contexts managed set data-masks. Similar rlang::.data, biocmask::.assays exported pronouns exported pass R CMD Checks. using biocmask within package, import associated pronoun biocmask use fully unqualified name, .assays, .assays_asis, etc.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/dot-pronouns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"contextual biocmask pronouns — dot-pronouns","text":"","code":".assays  .assays_asis  .rows  .rows_asis  .cols  .cols_asis"},{"path":"https://jtlandis.github.io/biocmask/reference/dot-pronouns.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"contextual biocmask pronouns — dot-pronouns","text":"object class NULL length 0. object class NULL length 0. object class NULL length 0. object class NULL length 0. object class NULL length 0. object class NULL length 0.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/dplyr_across_internals.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr across internals — dplyr_across_internals","title":"dplyr across internals — dplyr_across_internals","text":"following functions taken verbatim dplyr package behaviors across() consistent dplyr biocmask","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/dplyr_across_internals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dplyr across internals — dplyr_across_internals","text":"","code":"expr_substitute(expr, old, new)  node_walk_replace(node, old, new)  as_across_expr(fn, var)  is_inlinable_lambda(x)  validate_fns(quo, mask, error_call = caller_env())  is_inlinable_function(x)  is_inlinable_formula(x)"},{"path":"https://jtlandis.github.io/biocmask/reference/filter.SummarizedExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter SummarizedExperiment — filter.SummarizedExperiment","title":"Filter SummarizedExperiment — filter.SummarizedExperiment","text":"filter() function sused subset object, returing observations satisfy conditions. observation must return TRUE conditions within context retained. Note, guarantee valid SummarizedExperiment returned, filtering assays evaluation context disabled.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/filter.SummarizedExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter SummarizedExperiment — filter.SummarizedExperiment","text":"","code":"# S3 method for class 'SummarizedExperiment' filter(.data, ..., .preserve = FALSE)"},{"path":"https://jtlandis.github.io/biocmask/reference/filter.SummarizedExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter SummarizedExperiment — filter.SummarizedExperiment","text":".data SummarizedExperiment object ... conditions filter . must wrapped cols() rows() .preserve Relevant .data input grouped. .preserve = FALSE (default), grouping structure recalculated based resulting data, .e. number groups may change.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/filter.SummarizedExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter SummarizedExperiment — filter.SummarizedExperiment","text":"SummarizedExperiment Object","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/filter.SummarizedExperiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter SummarizedExperiment — filter.SummarizedExperiment","text":"","code":"# example code filter(se_simple,        rows(length > 30),        cols(condition == \"drug\")) #> # A SummarizedExperiment-tibble Abstraction: 3 × 2 #>   .features .samples | counts logcounts | gene  length direction | sample #>   <chr>     <chr>    |  <int>     <dbl> | <chr>  <int> <chr>     | <chr>  #> 1 row_3     col_3    |     15      2.71 | g3        60 +         | s3     #> 2 row_4     col_3    |     10      2.30 | g4        39 -         | s3     #> 3 row_5     col_3    |     12      2.48 | g5        37 +         | s3     #> 4 row_3     col_4    |     20      3.00 | g3        60 +         | s4     #> 5 row_4     col_4    |      3      1.10 | g4        39 -         | s4     #> 6 row_5     col_4    |      5      1.61 | g5        37 +         | s4     #> # ℹ 1 more variable: condition <chr>   filter(se_simple,        rows(rowSums(.assays_asis$counts) > 40),        cols(colSums(.assays_asis$counts) < 50)) #> # A SummarizedExperiment-tibble Abstraction: 3 × 3 #>   .features .samples | counts logcounts | gene  length direction | sample #>   <chr>     <chr>    |  <int>     <dbl> | <chr>  <int> <chr>     | <chr>  #> 1 row_3     col_2    |      6      1.79 | g3        60 +         | s2     #> 2 row_4     col_2    |     17      2.83 | g4        39 -         | s2     #> 3 row_5     col_2    |     13      2.56 | g5        37 +         | s2     #> 4 row_3     col_3    |     15      2.71 | g3        60 +         | s3     #> 5 row_4     col_3    |     10      2.30 | g4        39 -         | s3     #> 6 row_5     col_3    |     12      2.48 | g5        37 +         | s3     #> 7 row_3     col_4    |     20      3.00 | g3        60 +         | s4     #> 8 row_4     col_4    |      3      1.10 | g4        39 -         | s4     #> 9 row_5     col_4    |      5      1.61 | g5        37 +         | s4     #> # ℹ 1 more variable: condition <chr>  # assay context is disabled filter(se_simple,        counts > 12) |> try() #> Error in filter(se_simple, counts > 12) :  #>   Cannot filter in `assays` context #> ✖ review expression indices 1 in dots #> ℹ consider wrapping expressions in rows(...) or cols(...)  # convert to `data.frame` first as.data.frame(se_simple) |>   filter(counts > 12) #>   .features .samples counts logcounts gene length direction sample condition #> 1     row_1    col_1     14  2.639057   g1      1         -     s1     cntrl #> 2     row_2    col_1     19  2.944439   g2     24         +     s1     cntrl #> 3     row_3    col_1     16  2.772589   g3     60         +     s1     cntrl #> 4     row_5    col_1     18  2.890372   g5     37         +     s1     cntrl #> 5     row_4    col_2     17  2.833213   g4     39         -     s2     cntrl #> 6     row_5    col_2     13  2.564949   g5     37         +     s2     cntrl #> 7     row_3    col_3     15  2.708050   g3     60         +     s3      drug #> 8     row_3    col_4     20  2.995732   g3     60         +     s4      drug"},{"path":"https://jtlandis.github.io/biocmask/reference/group_by-SummarizedExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"group_by SummarizedExperiment — group_by-SummarizedExperiment","title":"group_by SummarizedExperiment — group_by-SummarizedExperiment","text":"create grouping variables rowData colData SummarizedExperiment object. Unlike data.frame method resulting output class left unchanged. Thus dplyr generics SummarizedExperiment must check grouping information manually.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/group_by-SummarizedExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"group_by SummarizedExperiment — group_by-SummarizedExperiment","text":"","code":"# S3 method for class 'SummarizedExperiment' group_by(.data, ..., .add = FALSE)  # S3 method for class 'SummarizedExperiment' ungroup(x, ...)"},{"path":"https://jtlandis.github.io/biocmask/reference/group_by-SummarizedExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"group_by SummarizedExperiment — group_by-SummarizedExperiment","text":".data SummarizedExperiment object ... contextual expressions specifying columns ungroup. Omitting ... ungroups entire object. .add FALSE, default, group_by() override existing groups. x SummarizedExperiment object","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/group_by-SummarizedExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"group_by SummarizedExperiment — group_by-SummarizedExperiment","text":"SummarizedExperiment object","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/group_by-SummarizedExperiment.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"group_by SummarizedExperiment — group_by-SummarizedExperiment","text":"ungroup(SummarizedExperiment): Ungroup SummarizedExperiment object","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/group_data-SummarizedExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"get grouping data — group_data-SummarizedExperiment","title":"get grouping data — group_data-SummarizedExperiment","text":"retrieve grouping information SummarizedExperiment object. stored within metadata() object.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/group_data-SummarizedExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get grouping data — group_data-SummarizedExperiment","text":"","code":"# S3 method for class 'SummarizedExperiment' group_data(.data)"},{"path":"https://jtlandis.github.io/biocmask/reference/group_data-SummarizedExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get grouping data — group_data-SummarizedExperiment","text":".data object","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/mutate.SummarizedExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutate a SummarizedExperiment object — mutate.SummarizedExperiment","title":"Mutate a SummarizedExperiment object — mutate.SummarizedExperiment","text":"Mutate SummarizedExperiment object data mask. Unlike dplyr implementations, contextual evaluations mutate() SummarizedExperiment valid.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/mutate.SummarizedExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutate a SummarizedExperiment object — mutate.SummarizedExperiment","text":"","code":"# S3 method for class 'SummarizedExperiment' mutate(.data, ...)"},{"path":"https://jtlandis.github.io/biocmask/reference/mutate.SummarizedExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutate a SummarizedExperiment object — mutate.SummarizedExperiment","text":".data SummarizedExperiment object ... expressions evaluate","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/mutate.SummarizedExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutate a SummarizedExperiment object — mutate.SummarizedExperiment","text":"SummarizedExperiment object","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/mutate.SummarizedExperiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutate a SummarizedExperiment object — mutate.SummarizedExperiment","text":"","code":"mutate(se_simple,     counts_1 = counts + 1,     logp_counts = log(counts_1),     # access assays context with \".assays\" pronoun,     # note that assays are sliced into a list to      # fit dimensions of cols context     cols(sum = purrr::map_dbl(.assays$counts, sum)),     # access assays context \"asis\" with the same pronoun     # but with a \"_asis\" suffix.     rows(sum = rowSums(.assays_asis$counts)) ) #> # A SummarizedExperiment-tibble Abstraction: 5 × 4 #>     .features .samples | counts logcounts counts_1 logp_counts | gene  length #>     <chr>     <chr>    |  <int>     <dbl>    <dbl>       <dbl> | <chr>  <int> #>   1 row_1     col_1    |     14      2.64       15        2.71 | g1         1 #>   2 row_2     col_1    |     19      2.94       20        3.00 | g2        24 #>   3 row_3     col_1    |     16      2.77       17        2.83 | g3        60 #>   4 row_4     col_1    |     11      2.40       12        2.48 | g4        39 #>   5 row_5     col_1    |     18      2.89       19        2.94 | g5        37 #>   …   …         …             …        …         …          …     …         … #> n-4 row_1     col_4    |      9      2.20       10        2.30 | g1         1 #> n-3 row_2     col_4    |      4      1.39        5        1.61 | g2        24 #> n-2 row_3     col_4    |     20      3.00       21        3.04 | g3        60 #> n-1 row_4     col_4    |      3      1.10        4        1.39 | g4        39 #> n   row_5     col_4    |      5      1.61        6        1.79 | g5        37 #> # ℹ n = 20 #> # ℹ 6 more variables: direction <chr>, sum <dbl>, `` <>, sample <chr>, #> #   condition <chr>, sum <dbl>"},{"path":"https://jtlandis.github.io/biocmask/reference/new_biocmask.html","id":null,"dir":"Reference","previous_headings":"","what":"New Biocmask — new_biocmask","title":"New Biocmask — new_biocmask","text":"Create biocmask object","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/new_biocmask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"New Biocmask — new_biocmask","text":"","code":"new_biocmask(obj, ...)"},{"path":"https://jtlandis.github.io/biocmask/reference/new_biocmask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"New Biocmask — new_biocmask","text":"obj Dispatch Object ... used","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. S4Vectors metadata, metadata<- SummarizedExperiment SummarizedExperiment, assay, assay<-, assays, assays<-, colData, colData<-, rowData, rowData<- dplyr arrange, filter, group_by, group_data, group_vars, mutate, select, summarise, ungroup","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/se_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Biocmask Simple Example Summarized Experiment — se_simple","title":"Biocmask Simple Example Summarized Experiment — se_simple","text":"small data SummarizedExperiment Object 20 observations, 5 rows 4 columns.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/se_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Biocmask Simple Example Summarized Experiment — se_simple","text":"","code":"se_simple"},{"path":[]},{"path":"https://jtlandis.github.io/biocmask/reference/se_simple.html","id":"se-simple","dir":"Reference","previous_headings":"","what":"se_simple","title":"Biocmask Simple Example Summarized Experiment — se_simple","text":"assays counts sampled data points 1:20 logcounts log transform counts rowData/.features gene fake gene name length fake gene length direction fake strand colData/.samples sample fake sample name condition control drug treatment","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/select.SummarizedExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"select assays, rowData, and colData names — select.SummarizedExperiment","title":"select assays, rowData, and colData names — select.SummarizedExperiment","text":"Select one values context. default omitting expression context selecting NOTHING context. <tidy-select> implementation within biocmask almost similar dplyr except used within across() function. used accross(), data provided eval_select zero length slice data. intentional choice prevent evaluation potentionally expensive chopping operations S4Vectors. means predicate function () able query original data.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/select.SummarizedExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"select assays, rowData, and colData names — select.SummarizedExperiment","text":"","code":"# S3 method for class 'SummarizedExperiment' select(.data, ...)"},{"path":"https://jtlandis.github.io/biocmask/reference/select.SummarizedExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"select assays, rowData, and colData names — select.SummarizedExperiment","text":".data SummarizedExperiment object ... <tidy-select> one selection expressions. Supports wrapping expressions within <biocmask-contexts>.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/select.SummarizedExperiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"select assays, rowData, and colData names — select.SummarizedExperiment","text":"","code":"# only keep assays, other contexts are dropped select(se_simple, everything()) #> # A SummarizedExperiment-tibble Abstraction: 5 × 4 #>     .features .samples | counts logcounts | | #>     <chr>     <chr>    |  <int>     <dbl> | | #>   1 row_1     col_1    |     14      2.64 | | #>   2 row_2     col_1    |     19      2.94 | | #>   3 row_3     col_1    |     16      2.77 | | #>   4 row_4     col_1    |     11      2.40 | | #>   5 row_5     col_1    |     18      2.89 | | #>   …   …         …             …        …      #> n-4 row_1     col_4    |      9      2.20 | | #> n-3 row_2     col_4    |      4      1.39 | | #> n-2 row_3     col_4    |     20      3.00 | | #> n-1 row_4     col_4    |      3      1.10 | | #> n   row_5     col_4    |      5      1.61 | | #> # ℹ n = 20  # only keep rowData, other contexts are dropped select(se_simple, rows(everything())) #> # A SummarizedExperiment-tibble Abstraction: 5 × 4 #>     .features .samples | | gene  length direction | #>     <chr>     <chr>    | | <chr>  <int> <chr>     | #>   1 row_1     col_1    | | g1         1 -         | #>   2 row_2     col_1    | | g2        24 +         | #>   3 row_3     col_1    | | g3        60 +         | #>   4 row_4     col_1    | | g4        39 -         | #>   5 row_5     col_1    | | g5        37 +         | #>   …   …         …           …         … …           #> n-4 row_1     col_4    | | g1         1 -         | #> n-3 row_2     col_4    | | g2        24 +         | #> n-2 row_3     col_4    | | g3        60 +         | #> n-1 row_4     col_4    | | g4        39 -         | #> n   row_5     col_4    | | g5        37 +         | #> # ℹ n = 20  select(se_simple, rows(where(is.numeric))) #> # A SummarizedExperiment-tibble Abstraction: 5 × 4 #>     .features .samples | | length | #>     <chr>     <chr>    | |  <int> | #>   1 row_1     col_1    | |      1 | #>   2 row_2     col_1    | |     24 | #>   3 row_3     col_1    | |     60 | #>   4 row_4     col_1    | |     39 | #>   5 row_5     col_1    | |     37 | #>   …   …         …               …   #> n-4 row_1     col_4    | |      1 | #> n-3 row_2     col_4    | |     24 | #> n-2 row_3     col_4    | |     60 | #> n-1 row_4     col_4    | |     39 | #> n   row_5     col_4    | |     37 | #> # ℹ n = 20  # Note on `where()` clause, all data is available within select select(se_simple, rows(where(~any(grepl(\"-\", .x))))) #> # A SummarizedExperiment-tibble Abstraction: 5 × 4 #>     .features .samples | | direction | #>     <chr>     <chr>    | | <chr>     | #>   1 row_1     col_1    | | -         | #>   2 row_2     col_1    | | +         | #>   3 row_3     col_1    | | +         | #>   4 row_4     col_1    | | -         | #>   5 row_5     col_1    | | +         | #>   …   …         …          …           #> n-4 row_1     col_4    | | -         | #> n-3 row_2     col_4    | | +         | #> n-2 row_3     col_4    | | +         | #> n-1 row_4     col_4    | | -         | #> n   row_5     col_4    | | +         | #> # ℹ n = 20  # within an `across()`, only a zero-length slice avialble, so the # `where()` predicate cannot access the data mutate(se_simple,        rows(         across(where(~any(grepl(\"-\", .x))),                ~sprintf(\"%s foo\", .x)))) #> # A SummarizedExperiment-tibble Abstraction: 5 × 4 #>     .features .samples | counts logcounts | gene  length direction | sample #>     <chr>     <chr>    |  <int>     <dbl> | <chr>  <int> <chr>     | <chr>  #>   1 row_1     col_1    |     14      2.64 | g1         1 -         | s1     #>   2 row_2     col_1    |     19      2.94 | g2        24 +         | s1     #>   3 row_3     col_1    |     16      2.77 | g3        60 +         | s1     #>   4 row_4     col_1    |     11      2.40 | g4        39 -         | s1     #>   5 row_5     col_1    |     18      2.89 | g5        37 +         | s1     #>   …   …         …             …        …     …         … …            …     #> n-4 row_1     col_4    |      9      2.20 | g1         1 -         | s4     #> n-3 row_2     col_4    |      4      1.39 | g2        24 +         | s4     #> n-2 row_3     col_4    |     20      3.00 | g3        60 +         | s4     #> n-1 row_4     col_4    |      3      1.10 | g4        39 -         | s4     #> n   row_5     col_4    |      5      1.61 | g5        37 +         | s4     #> # ℹ n = 20 #> # ℹ 1 more variable: condition <chr> # here is an acceptable usage of the `where()` predicate mutate(se_simple,        rows(         across(where(is.character),                ~sprintf(\"%s foo\", .x)))) #> # A SummarizedExperiment-tibble Abstraction: 5 × 4 #>     .features .samples | counts logcounts | gene   length direction | sample #>     <chr>     <chr>    |  <int>     <dbl> | <chr>   <int> <chr>     | <chr>  #>   1 row_1 foo col_1    |     14      2.64 | g1 foo      1 - foo     | s1     #>   2 row_2 foo col_1    |     19      2.94 | g2 foo     24 + foo     | s1     #>   3 row_3 foo col_1    |     16      2.77 | g3 foo     60 + foo     | s1     #>   4 row_4 foo col_1    |     11      2.40 | g4 foo     39 - foo     | s1     #>   5 row_5 foo col_1    |     18      2.89 | g5 foo     37 + foo     | s1     #>   …   …    …    …             …        …     …  …       … …  …         …     #> n-4 row_1 foo col_4    |      9      2.20 | g1 foo      1 - foo     | s4     #> n-3 row_2 foo col_4    |      4      1.39 | g2 foo     24 + foo     | s4     #> n-2 row_3 foo col_4    |     20      3.00 | g3 foo     60 + foo     | s4     #> n-1 row_4 foo col_4    |      3      1.10 | g4 foo     39 - foo     | s4     #> n   row_5 foo col_4    |      5      1.61 | g5 foo     37 + foo     | s4     #> # ℹ n = 20 #> # ℹ 1 more variable: condition <chr>"},{"path":"https://jtlandis.github.io/biocmask/reference/summarise.SummarizedExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize SummarizedExperiment — summarise.SummarizedExperiment","title":"Summarize SummarizedExperiment — summarise.SummarizedExperiment","text":"Summarize SummarizedExperiment","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/summarise.SummarizedExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize SummarizedExperiment — summarise.SummarizedExperiment","text":"","code":"# S3 method for class 'SummarizedExperiment' summarise(.data, ..., .retain = TRUE)"},{"path":"https://jtlandis.github.io/biocmask/reference/summarise.SummarizedExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize SummarizedExperiment — summarise.SummarizedExperiment","text":".data SummarizedExperiment object, ... expressions summarize object .retain logical value. TRUE (default), ungrouped dimensions retained resulting SummarizedExperiment object scalar outputs recycled length ungrouped dimension. FALSE, outputs expected scalar values columns ungrouped dimensions dropped.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/summarise.SummarizedExperiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize SummarizedExperiment — summarise.SummarizedExperiment","text":"","code":"# outputs in assay context may be either # length 1, or the length of the ungrouped # dimension while .retain = TRUE se_simple |>   group_by(rows(direction)) |>   summarise(col_sums = colSums(counts),             sample = sample(1:20, 1L)) #> # A SummarizedExperiment-tibble Abstraction: 2 × 4 #> # Groups: rows(direction) #>   .features .samples | col_sums sample | direction | sample condition #>       <int> <chr>    |    <dbl>  <int> | <chr>     | <chr>  <chr>     #> 1         1 col_1    |       25     13 | -         | s1     cntrl     #> 2         2 col_1    |       25     13 | +         | s1     cntrl     #> 3         1 col_2    |       17     13 | -         | s2     cntrl     #> 4         2 col_2    |       12     13 | +         | s2     cntrl     #> 5         1 col_3    |       53     12 | -         | s3     drug      #> 6         2 col_3    |       21     12 | +         | s3     drug      #> 7         1 col_4    |       28     12 | -         | s4     drug      #> 8         2 col_4    |       29     12 | +         | s4     drug       # .retain = FALSE will drop ungrouped dimensions and # outputs of assay context should be length 1. se_simple |>   group_by(rows(direction)) |>   summarise(col_sums = list(colSums(counts)),             .retain = FALSE)  #> # A SummarizedExperiment-tibble Abstraction: 2 × 1 #> # Groups: rows(direction) #>   .features .samples | col_sums  | direction | #>       <int>    <int> | <list>    | <chr>     | #> 1         1        1 | <dbl [4]> | -         | #> 2         2        1 | <dbl [4]> | +         |  # using an `across()` function will help # nest ungrouped dimensions se_simple |>   group_by(rows(direction)) |>   summarise(col_sums = list(colSums(counts)),             cols(across(everything(), list)),              .retain = FALSE) #> # A SummarizedExperiment-tibble Abstraction: 2 × 1 #> # Groups: rows(direction) #>   .features .samples | col_sums  | direction | sample    condition #>       <int>    <int> | <list>    | <chr>     | <list>    <list>    #> 1         1        1 | <dbl [4]> | -         | <chr [4]> <chr [4]> #> 2         2        1 | <dbl [4]> | +         | <chr [4]> <chr [4]>"},{"path":"https://jtlandis.github.io/biocmask/reference/vctrs-vec_recycle.html","id":null,"dir":"Reference","previous_headings":"","what":"Recycle a vector — vctrs-vec_recycle","title":"Recycle a vector — vctrs-vec_recycle","text":"re-export vctrs::vec_recycle S7 generic function allow S4Vectors.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/vctrs-vec_recycle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recycle a vector — vctrs-vec_recycle","text":"","code":"vec_recycle(x, size, ..., x_arg = \"\", call = caller_env())"},{"path":"https://jtlandis.github.io/biocmask/reference/vctrs-vec_recycle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recycle a vector — vctrs-vec_recycle","text":"x vector recycle. size Desired output size. ... Depending function used: vec_recycle_common(), vectors recycle. vec_recycle(), dots empty. x_arg Argument name x. used error messages inform user argument incompatible size. call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/vctrs-vec_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"replicate a vector — vctrs-vec_rep","title":"replicate a vector — vctrs-vec_rep","text":"re-export vctrs::vec_rep vctrs::vec_rep_each S7 generic function allow S4Vectors.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/vctrs-vec_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"replicate a vector — vctrs-vec_rep","text":"","code":"vec_rep(   x,   times,   ...,   error_call = caller_env(),   x_arg = \"x\",   times_arg = \"times\" )  vec_rep_each(   x,   times,   ...,   error_call = caller_env(),   x_arg = \"x\",   times_arg = \"times\" )"},{"path":"https://jtlandis.github.io/biocmask/reference/vctrs-vec_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"replicate a vector — vctrs-vec_rep","text":"x vector. times vec_rep(), single integer number times repeat entire vector. vec_rep_each(), integer vector number times repeat element x. times recycled size x. ... dots future extensions must empty. error_call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information. x_arg, times_arg Argument names errors.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/vctrs_slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Get observations of a vector — vctrs_slice","title":"Get observations of a vector — vctrs_slice","text":"extends vctrs::vec_slice S4Vectors::Vector class masking vec_slice S7::new_generic. Atomic vectors base S3 classes (list, data.frame, factor, Dat, POSIXct) dispatch vctrs::vec_slice method normal. Dispatch support S4Vectors::Vector S4Vectors::DataFrame classes provides unified framework working base R vectors S4Vectors.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/vctrs_slice.html","id":"s-vectors-vector-implementation","dir":"Reference","previous_headings":"","what":"S4Vectors::Vector Implementation","title":"Get observations of a vector — vctrs_slice","text":"method naively call [ method S4 class inherits S4Vectors::Vector class. may efficient way slice S4 class, work. implementation, x@mcol data expected retained call biocmask::vec_slice(x, ).","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/vctrs_slice.html","id":"s-vectors-dataframe-implementation","dir":"Reference","previous_headings":"","what":"S4Vectors::DataFrame Implementation","title":"Get observations of a vector — vctrs_slice","text":"DataFrame implementation works similar vctrs::vec_slice works data.frame object. sliced rows x@listData. maintain size stability DataFrame object, change @nrows appropriate value, perform recursive call @elementMetadata NULL.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/vctrs_slice.html","id":"performance","dir":"Reference","previous_headings":"","what":"Performance","title":"Get observations of a vector — vctrs_slice","text":"Depending size complexity S4 Vector object, may find standard subset operation extremely slow. example, consider SummarizedExperiment whose rowData contains CompressedGRangesList object assigned name \"exons\" whose length 250,000 underlying @unlistData length 1,600,000. Performing .features grouping operation attempting evaluate exons within row context force CompressedGRangesList object chopped element-wise. Unfortunately, massive performance hit attempting construct 250,000 GRanges. Unless mind waiting hour dplyr verb exons gets evaluated, consider biocmask_s4_proxy_vec(). attempts reconstruct certain standard S4Vectors::Vectors standard vectors tibbles. equivalent exons object require much memory use, advantage taking several seconds construct.done, can attempt restore original S4 Vector biocmask_restore_s4_proxy(). biocmask_s4_proxy_vec() faster work less checks object validity @elementMetadata @metadata dropped objects.","code":""},{"path":"https://jtlandis.github.io/biocmask/reference/vctrs_slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get observations of a vector — vctrs_slice","text":"","code":"vec_slice(x, i, ...)"},{"path":"https://jtlandis.github.io/biocmask/reference/vctrs_slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get observations of a vector — vctrs_slice","text":"x vector integer, character logical vector specifying locations names observations get/set. Specify TRUE index elements (x[]), NULL, FALSE integer() index none (x[NULL]). ... dots future extensions must empty.","code":""}]
